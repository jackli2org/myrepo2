export declare type EnumArgType = any[] | object;
/**
 * This is an abstract class that is not intended to be
 * used directly. Extend it to turn your class into an enum
 * (initialization is performed via `MyClass.initEnum()`).
 */
export declare class Enum {
    static enumValues: any;
    name: string;
    /**
     * `initEnum()` closes the class. Then calling this constructor
     * throws an exception.
     *
     * If your subclass has a constructor then you can control
     * what properties are added to `this` via the argument you
     * pass to `super()`. No arguments are fine, too.
     */
    constructor(instanceProperties: object);
    /**
     * Create new Enum by name and description
     * @param {string} enumName, enum name, used in `toString`
     * @param {EnumArgType} arg Describing new fields of enum
     * @returns {any}
     */
    static create(enumName: string, arg: EnumArgType): any;
    /**
     * Set up the enum, close the class.
     *
     * @param arg Either an object whose properties provide the names
     * and values (which must be mutable objects) of the enum constants.
     * Or an Array whose elements are used as the names of the enum constants
     * The values are create by instantiating the current class.
     */
    static initEnum(arg: EnumArgType): any;
    /**
     * Get Enum instance by value
     * @param value
     */
    static fromValue(value: any): any;
    /**
     * Get Enum instance by name
     * @param {string} name
     */
    static fromName(name: string): any;
    /**
     * Make enum classes iterable
     */
    static [Symbol.iterator](): any;
    private static _enumValuesFromArray(arr, context);
    private static _enumValuesFromObject(obj);
    private static _pushEnumValue(enumValue, name);
    /**
     * Default `toString()` method for enum constant.
     */
    toString(): string;
}
